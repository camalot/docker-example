name: Docker Build
on:
  pull_request:
    branches:
    - develop
    types:
    - closed
env:
  PROJECT_NAME: docker-example
jobs:
  version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.semvers.outputs.patch }} # set the app_version to be the PATCH updated version
      tag: ${{ steps.semvers.outputs.v_patch }} # set the tag to be the PATCH updated version.
    env:
      GITHUB_TOKEN: "${{ github.token }}"
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    # Get the current tag
    - name: 'Get Previous tag'
      id: previoustag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
      with:
        fallback: 1.1.0 # Optional fallback tag to use when no tag can be found
    # calculate the next version
    - name: 'Get next minor version'
      id: semvers
      uses: "WyriHaximus/github-action-next-semvers@v1"
      with:
        version: ${{ steps.previoustag.outputs.tag }}
    - run: echo "app_version ${{ steps.semvers.outputs.patch }}"
  docker:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: version
    steps:
    - name: Prepare
      id: prep
      run: |
        GHCR_IMAGE="ghcr.io/${{ github.REPOSITORY }}

        TAGS="${GHCR_IMAGE}:latest,${GHCR_IMAGE}:${{ needs.version.outputs.app_version }}";
        echo ::set-output name=tags::${TAGS}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ github.token }}


    - name: Build and Push
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        push: true
        build-args: |
          BUILD_VERSION=${{ needs.version.outputs.app_version }}
          PROJECT_NAME=$${{ env.PROJECT_NAME }}
        tags: ${{ steps.prep.outputs.tags }}

    - name: "Create Release Tag"
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        token: ${{ github.token }}
        tag: "${{ needs.version.outputs.tag }}"

    - name: Merge develop -> main
      uses: devmasx/merge-branch@v1.4.0
      with:
        type: now
        from_branch: develop
        target_branch: main
        github_token: ${{ github.token }}

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ github.token }}
        script: |
          const output = `:robot: I have pushed image \`${{ env.PROJECT_NAME }}\` version \`${{ needs.version.outputs.app_version }}\` to container registry.`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
